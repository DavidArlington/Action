  ;         
  ; Conway's Game of Life
  ; Atari verson by Dave Arlington
  ; Thing-a-Week 3/22/21
  ;
  
  DEFINE START="6",
         OPTION="3",
         BLANK="32",
         CURSOR="35",
         MARK="10",       
         RTI="$40",       
         PHA="$48",       
         PLA="$68" 
  
  BYTE   oldx=[0],    oldy=[0],
         curx=[0],    cury=[0],
         stik,        chbase=$D409,
         nmien=$D40E, sdmctl=$22F,
         color2=$2C6, crsinh=$2F0,
         lmargn=$52,  chbas=$2F4,
         rowcrs=$54,  colcrs=$55,
         txtrow=$290, consol=$D01F
  
  BYTE ARRAY oldscrn(480), newscrn(480)
  
  CARD   savmsc=$58,  sdlstl=$230,     
         memtop=$2E5, txtcol=$291,     
         vdslst=$200, RamSet
  
  ; You totally don't need these first three PROCedures.
  ; They just set up the title screen. I took this 
  ; stuff from my one published ACTION! program.
  PROC dli1()  
    [PHA]  
    chbase=$E0  
    [PLA RTI]            
  RETURN
  
  PROC DliSetup()  
    BYTE ARRAY temp  
  
    nmien=192  
    temp=sdlstl  
    temp(14)==+128  
    sdmctl=0  
    vdslst=dli1  
    sdmctl=34
  RETURN 
  
  PROC TitleScreen()
  
    Graphics(2)
    DliSetup()              
    color2=0
    crsinh=1
    lmargn=0
    RamSet=(memtop-$400)&$FC00 
    chbas=RamSet RSH 8
    memtop=RamSet
    MoveBlock(RamSet,$E200,512)
    MoveBlock(RamSet,$E000,8)
    MoveBlock(RamSet+8,$E100+24,8)
    MoveBlock(RamSet+40,$E100+96,8)
    MoveBlock(RamSet+24,$E100+56,8)
    MoveBlock(RamSet+32,$E100+120,8)
    rowcrs=3
    colcrs=6
    PrintDE(6,"!ONWAYS")
    PrintDE(6,"       #AME")
    PrintDE(6,"        $F")
    PrintDE(6,"         %IFE")
    txtrow=0
    txtcol=0 
    PrintE("     Atari Version by Dave Arlington")
    PrintE("          Thing-a-Week 2/22/21")
    PrintE("              Press OPTION")
    DO
    UNTIL consol=OPTION or STrig(0)=0
    OD
  RETURN         

  PROC Delay(CARD ctr)  
    CARD i  

    FOR i=0 to ctr  
    DO    
      ;  Action should really have a Pause()
	  ;  in their library.
    OD
  RETURN

  ; All vertical move is in first two bits 
  ; 10 is Up, 01 is down, all else no good
  BYTE FUNC StickV(BYTE s)
  RETURN (s&3)

  ; All horizontal move is in bits 3, 4
  ; 10 is Left, 01 is Right, all else no good
  BYTE FUNC StickH(BYTE s)
  RETURN (s RSH 2)    

  PROC MoveCursor()
    ;If a cell has a mark, don't write over it
    ;when cursor moves past/over it	
    IF Locate(oldx,oldy)<> MARK THEN
      color=BLANK  
      Plot(oldx,oldy)  
    FI  
    IF Locate(curx,cury)<> MARK THEN  
      color=CURSOR  
      Plot(curx,cury)  
    FI  
    Delay(3000) ;otherwise moves TOO fast
  RETURN  
  
  PROC SeedField()    
    Graphics(17)  ;Graphics 1 with no text window
    curx=0        ; 20x24 grid = 480 bytes screen
    cury=0  
    color=CURSOR  
    Plot(curx,cury)  ;cursor start upper left
    DO  
      oldx=curx  ;note where the cursor started
      oldy=cury  
      stik=Stick(0)  ;read joystick
      IF StickV(stik)=2 AND cury>0 THEN    
        cury==-1  
      FI  
      IF StickV(stik)=1 AND cury<23 THEN    
        cury==+1  
      FI  
      IF StickH(stik)=2 AND curx>0 THEN
        curx==-1  
      FI  
      IF StickH(stik)=1 AND curx<19 THEN    
        curx==+1  
      FI  
      DELAY(3000)  ;gotta slow it down 
	  ;only call MoveCursor if it moved
	  ;so cursor won't blink
      IF curx<>oldx OR cury<>oldy THEN  
        MoveCursor()  
      FI  
      IF STrig(0)=0 THEN    ;Stick trigger pressed?
	    ; Either drop a cell or erase a cell
        IF Locate(curx,cury)<> MARK THEN      
          color=MARK      
          Plot(curx,cury)    
        ELSEIF Locate(curx,cury)=MARK THEN      
          color=CURSOR      
          Plot(curx,cury)    
        FI    
        Delay(20000)  ;need bigger delay for trigger
      FI  
    UNTIL consol=START  ; initial field done
    OD
  RETURN
  
  BYTE FUNC Neighbors(CARD loc)  
    BYTE num  ; Don't initialize this to zero
	          ; i.e. BYTE num=[0], that makes it a
			  ; static variable and will retain value
			  ; between FUNC calls
  
    num=0 
    ; You may think this is ineffecient but it is a
    ; TON faster in ACTION! than using nested FOR 
    ; loops because it compiles into super simple
    ; machine code	
    IF oldscrn(loc-21)<>0 THEN    
      num==+1  
    FI  
    IF oldscrn(loc-20)<>0 THEN    
      num==+1  
    FI  
    IF oldscrn(loc-19)<>0 THEN    
      num==+1  
    FI  
    IF oldscrn(loc-1)<>0 THEN    
      num==+1  
    FI  
    IF oldscrn(loc+1)<>0 THEN    
      num==+1  
    FI  
    IF oldscrn(loc+21)<>0 THEN    
      num==+1  
    FI  
    IF oldscrn(loc+20)<>0 THEN    
      num==+1  
    FI  
    IF oldscrn(loc+19)<>0 THEN    
      num==+1  
    FI  
  
  RETURN(num)
  
  PROC Life()  
    BYTE nbors  ;count live neighbors each cell has
    CARD ctr    ;memory location
  
    color=BLANK  
    Plot(curx,cury)  ;turn off hashtag cursor
    DO    
	  ;copy screen memory to oldscrn, zero out dest
	  ;memory
      MoveBlock(oldscrn,savmsc,480)    
      Zero(newscrn,480)    
      IF color=10 THEN      
        color=74    ;if color was green, make orange
      ELSE      
        color=10    ;otherwise make it orange
      FI     
      FOR ctr=0 to 479   ;for every location on screen 
      DO      
        nbors=Neighbors(ctr)    ;the rules implemented  
        IF nbors=3 THEN        
          newscrn(ctr)=color      
        ELSEIF nbors<2 OR nbors>3 THEN        
          newscrn(ctr)=0      
        ELSEIF oldscrn(ctr)=0 THEN        
          newscrn(ctr)=0      
        ELSE        
          newscrn(ctr)=color      
        FI    
      OD  
      ;when done filling in the new screen, copy back
      ;to screen memory	  
      MoveBlock(savmsc,newscrn,480)    
      ; Delay(20000)  
    UNTIL consol=OPTION  
    OD    
  RETURN
  
  PROC Main()
    TitleScreen()
    DO  
      SeedField()  
      Life()
    OD
  RETURN
